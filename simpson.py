# -*- coding: utf-8 -*-
"""Simpson.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UlIRTm5QnXZKYG2qpNrCrL20OsJmskBb
"""

import numpy as np

#funcion a integrar
def f(x):
  return x**2

def simpson_1_3(n,a,b):

  h = (b-a)/(2*n)

  #iniciamos con las sumas en 0
  S_1=0
  S_2=0

  #calculamos las sumas de impares y pares
  for i in range(1,n):

    x=a+(2*i-1)*h
    S_1+=f(x)

    if i < n:  # Solo sumar hasta n-1
            S_2 += f(x)  # Suma de términos pares

    ANQ=(h/3)*(f(a)+f(b)+4*S_1+2*S_2)
  return ANQ

a=float(input("ingrese el valor de a: "))
b=float(input("ingrese el valor de b: "))
m=int(input("ingrese el valor de n: "))

print("El valor de la integral es: ",simpson_1_3(m,a,b))

import numpy as np

R= 0.1 #radio del anillo en metros
z=0.05 #Distancia del punto P al centro del anillo en el eje z en metros
Q=1.0e-6 #Carga total en el anillo en coulombs
epsilon=8.854e-12 #Constante dielectrica del vacio F/m

p_0= Q/(2*np.pi*R) #Densidad maxima

#funcion a integrar
def f(x):
  P_theta= p_0*np.sin(x)
  integral=(R*z*P_theta)/((R**2+z**2)**(3/2))
  return integral

def simpson_1_3(n,a,b):

  h = (b-a)/(2*n)

  #iniciamos con las sumas en 0
  S_1=0
  S_2=0

  #calculamos las sumas de impares y pares
  for i in range(1,n+1):

    x=a+(2*i-1)*h
    S_1+=f(x)

    x=a+2*i*h
    if i < n:  # Solo sumar hasta n-1
            S_2 += f(x)

    ANQ=(h/3)*(f(a)+f(b)+4*S_1+2*S_2)
  return ANQ

a=0
b=2*np.pi
m=100

Ez= (1/(4*np.pi*epsilon))*(simpson_1_3(m,a,b))
print("El valor Ez: ",Ez )

import numpy as np

R= 0.1 #radio del anillo en metros
z=0.05 #Distancia del punto P al centro del anillo en el eje z en metros
Q=1.0e-6 #Carga total en el anillo en coulombs
epsilon=8.854e-12 #Constante dielectrica del vacio F/m

#funcion a integrar
def f(x):
  dq=Q/(2*np.pi)
  integral=(z*dq)/((R**2+z**2)**(3/2))
  return integral

def simpson_1_3(n,a,b):

  h = (b-a)/(2*n)

  #iniciamos con las sumas en 0
  S_1=0
  S_2=0

  #calculamos las sumas de impares y pares
  for i in range(1,n):

    x=a+(2*i-1)*h
    S_1+=f(x)

    if i < n:  # Solo sumar hasta n-1
            S_2 += f(x)  # Suma de términos pares

    ANQ=(h/3)*(f(a)+f(b)+4*S_1+2*S_2)
  return ANQ

a=0
b=2*np.pi
m=int(input("ingrese el valor de n: "))

Ez= (1/(4*np.pi*epsilon))*(simpson_1_3(m,a,b))
print("El valor Ez: ",Ez )

Ez_analitico = (Q*z)/(4*np.pi*epsilon*(R**2+z**2)**(3/2))
print("El valor analitico:", Ez_analitico)

error = abs(Ez-Ez_analitico)/abs(Ez_analitico)*100
print("Error relativo (%):", error)

import numpy as np

masa= 0.5 #en kg
Ampli=0.1 #Amplitud en metros
w=2*np.pi #Frecuencia angular en rad/s

#funcion a integrar
def f(t):
  trayectoria=Ampli*np.sin(w*t)
  velocidad=Ampli*w*np.cos(w*t)

  T=0.5*m*(velocidad)**2
  V=0.5*m*w**2*(trayectoria**2)
  return T-V

def simpson_3_8(n,a,b):

  h = (b-a)/(3*n)

  #iniciamos con las sumas en 0
  S_1=0
  S_2=0
  S_3=0

  #calculamos las sumas de impares y pares
  for i in range(1,n):

    x=a+(3*i-2)*h
    S_1+=f(x)

    x=a+(3*i-1)*h
    S_2 += f(x)

    if i < n-1:
      x=a+3*i*h #esta suma debe ser hasta n-1
      S_3 += f(x)



    ANQ=(3*h/8)*(f(a)+f(b)+3*(S_1+S_2)+2*S_3)

    return ANQ

a=0
b=np.pi/(4*w)

S_a = ((masa*w*Ampli**2)/4)*(np.sin(2*w*b)-np.sin(2*w*a))
m=int(input("ingrese el valor de n: "))

print("El valor de la integral es: ", simpson_3_8(m,a,b),S_a)

import numpy as np

masa= 0.5 #en kg
Ampli=0.1 #Amplitud en metros
w=2*np.pi #Frecuencia angular en rad/s

#funcion a integrar
def f(t):
  return 0.5*m*Ampli**2*(np.sin(w*t))**2*(1-w**2)

def simpson_3_8(n,a,b):

  h = (b-a)/(3*n)

  #iniciamos con las sumas en 0
  S_1=0
  S_2=0
  S_3=0

  #calculamos las sumas de impares y pares
  for i in range(1,n):

    x=a+(3*i-2)*h
    S_1+=f(x)

    x=a+(3*i-1)*h
    S_2 += f(x)

    if i < n-1:
      x=a+3*i*h #esta suma debe ser hasta n-1
      S_3 += f(x)



    ANQ=(3*h/8)*(f(a)+f(b)+3*(S_1+S_2)+2*S_3)

    return ANQ

a=0
b=np.pi/(4*w)

S_a = ((masa*w*Ampli**2)/4)*(np.sin(2*w*b)-np.sin(2*w*a))
m=int(input("ingrese el valor de n: "))

print("El valor de la integral es: ", simpson_3_8(m,a,b),S_a)